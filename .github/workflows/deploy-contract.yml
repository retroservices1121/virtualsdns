# .github/workflows/deploy-contract.yml
name: Deploy Smart Contract

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'base-sepolia'
        type: choice
        options:
        - base-sepolia
        - base-mainnet
      verify:
        description: 'Verify contract on BaseScan'
        required: true
        default: true
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create environment file
      run: |
        echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> .env
        echo "BASESCAN_API_KEY=${{ secrets.BASESCAN_API_KEY }}" >> .env
        
    - name: Compile contracts
      run: npm run compile
      
    - name: Deploy contract
      run: |
        if [ "${{ github.event.inputs.network }}" = "base-mainnet" ]; then
          npm run deploy:mainnet
        else
          npm run deploy:testnet
        fi
      
    - name: Verify contract
      if: ${{ github.event.inputs.verify }}
      run: |
        if [ "${{ github.event.inputs.network }}" = "base-mainnet" ]; then
          npm run verify:mainnet
        else
          npm run verify:testnet
        fi
        
    - name: Upload deployment info
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: |
          deployment-info.json
          .env.production
          DEPLOYMENT.md
        
    - name: Comment deployment info
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('deployment-info.json')) {
            const deploymentInfo = JSON.parse(fs.readFileSync('deployment-info.json', 'utf8'));
            const comment = `
            ## ðŸš€ Contract Deployed Successfully!
            
            **Network**: ${{ github.event.inputs.network }}
            **Contract Address**: \`${deploymentInfo.deployment.contractAddress}\`
            **Deployer**: \`${deploymentInfo.deployment.deployerAddress}\`
            **Block**: ${deploymentInfo.deployment.deploymentBlock}
            
            ### ðŸ“Š Premium Names Secured
            - **Single Characters**: ${deploymentInfo.premiumNames.categories.singleChars.count}
            - **AI Keywords**: ${deploymentInfo.premiumNames.categories.aiKeywords.count}  
            - **Popular Names**: ${deploymentInfo.premiumNames.categories.popularNames.count}
            - **Total Portfolio Value**: $${deploymentInfo.portfolio.estimatedTotalValue.toLocaleString()}
            
            ### ðŸ”— Links
            - [BaseScan](${deploymentInfo.links.basescan})
            - [Add to MetaMask](${deploymentInfo.deployment.contractAddress})
            
            ### ðŸ“‹ Next Steps
            1. Update Vercel environment variable: \`REACT_APP_REGISTRY_ADDRESS=${deploymentInfo.deployment.contractAddress}\`
            2. Redeploy frontend
            3. Test domain registration
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
