- name: 🚀 Deploy Contract
      id: deploy
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.network }}..." >> $GITHUB_STEP_SUMMARY
        
        # Show environment for debugging
        echo "📊 **Environment Info:**" >> $GITHUB_STEP_SUMMARY
        echo "- Node version: $(node --version)" >> $GITHUB_STEP_SUMMARY
        echo "- NPM version: $(npm --version)" >> $GITHUB_STEP_SUMMARY
        echo "- Network: ${{ github.event.inputs.network }}" >> $GITHUB_STEP_SUMMARY
        
        # Run deployment and capture output
        if [ "${{ github.event.inputs.network }}" = "base-mainnet" ]; then
          echo "🔧 Running: npm run deploy:mainnet" >> $GITHUB_STEP_SUMMARY
          npm run deploy:mainnet > deployment-output.txt 2>&1
          DEPLOY_RESULT=$?
        else
          echo "🔧 Running: npm run deploy:testnet" >> $GITHUB_STEP_SUMMARY
          npm run deploy:testnet > deployment-output.txt 2>&1
          DEPLOY_RESULT=$?
        fi
        
        # Show deployment result
        echo "📋 **Deployment Command Result:** Exit code $DEPLOY_RESULT" >> $GITHUB_STEP_SUMMARY
        
        # Always show the deployment output for debugging
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📄 **Full Deployment Output:**" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat deployment-output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Check if deployment succeeded
        if [ $DEPLOY_RESULT -ne 0 ]; then
          echo "❌ **Deployment command failed with exit code $DEPLOY_RESULT**" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Try multiple patterns to extract contract address
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔍 **Address Extraction Attempts:**" >> $GITHUB_STEP_SUMMARY
        
        # Pattern 1: Original expected format
        CONTRACT_ADDRESS=$(grep -oP 'Contract deployed to: \K0x[a-fA-F0-9]{40}' deployment-output.txt || echo "")
        echo "- Pattern 1 (Contract deployed to:): '$CONTRACT_ADDRESS'" >> $GITHUB_STEP_SUMMARY
        
        # Pattern 2: Any Ethereum address
        if [ -z "$CONTRACT_ADDRESS" ]; then
          CONTRACT_ADDRESS=$(grep -oE '0x[a-fA-F0-9]{40}' deployment-output.txt | head -1 || echo "")
          echo "- Pattern 2 (Any 0x address): '$CONTRACT_ADDRESS'" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Pattern 3: Contract Address line
        if [ -z "$CONTRACT_ADDRESS" ]; then
          CONTRACT_ADDRESS=$(grep -i "contract address" deployment-output.txt | grep -oE '0x[a-fA-F0-9]{40}' | head -1 || echo "")
          echo "- Pattern 3 (Contract Address): '$CONTRACT_ADDRESS'" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Final check
        if [ -n "$CONTRACT_ADDRESS" ]; then
          echo "contract_address=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT
          echo "✅ **Contract Successfully Deployed:** \`$CONTRACT_ADDRESS\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Failed to extract contract address from any pattern**" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Available lines containing '0x':**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -i "0x" deployment-output.txt || echo "No lines containing '0x' found"
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
